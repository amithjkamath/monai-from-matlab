classdef aten___convolution5 < nnet.layer.Layer & nnet.layer.Formattable & ...
        nnet.layer.AutogeneratedFromPyTorch & nnet.layer.Acceleratable
    %aten___convolution5 Auto-generated custom layer
    % Auto-generated by MATLAB on 16-Jun-2024 12:59:00
    
    properties (Learnable)
        % Networks (type dlnetwork)
        
    end
    
    properties
        % Non-Trainable Parameters
        convolution_6
        convolution_29
        convolution_30
        convolution_31
        convolution_11
        convolution_32
        convolution_7
        convolution_111
        convolution_112
        convolution_16
        convolution_161
        
        
        
    end
    
    properties (Learnable)
        % Trainable Parameters
        Param_weight
    end
    
    methods
        function obj = aten___convolution5(Name, Type, InputNames, OutputNames)
            obj.Name = Name;
            obj.Type = Type;
            obj.NumInputs = 1;
            obj.NumOutputs = 1;
            obj.InputNames = InputNames;
            obj.OutputNames = OutputNames;
        end
        
        function [convolution_input_1] = predict(obj,convolution_argument1_1)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [convolution_argument1_1, convolution_argument1_1_format] = msd_heart_model.ops.permuteToReversePyTorch(convolution_argument1_1, 'BCSSS', 5);
            [convolution_argument1_1] = struct('value', convolution_argument1_1, 'rank', int64(5));
            
            [convolution_input_1] = tracedPyTorchFunction(obj,convolution_argument1_1,false,"predict");
            
            
            [convolution_input_1] = msd_heart_model.ops.labelWithPropagatedFormats(convolution_input_1, "BCSSS");
            convolution_input_1 = convolution_input_1.value ;
            
        end
        
        
        
        function [convolution_input_1] = forward(obj,convolution_argument1_1)
            
            %Use the input format inferred by the importer to permute the input into reverse-PyTorch dimension order
            [convolution_argument1_1, convolution_argument1_1_format] = msd_heart_model.ops.permuteToReversePyTorch(convolution_argument1_1, 'BCSSS', 5);
            [convolution_argument1_1] = struct('value', convolution_argument1_1, 'rank', int64(5));
            
            [convolution_input_1] = tracedPyTorchFunction(obj,convolution_argument1_1,true,"forward");
            
            
            [convolution_input_1] = msd_heart_model.ops.labelWithPropagatedFormats(convolution_input_1, "BCSSS");
            convolution_input_1 = convolution_input_1.value ;
            
        end
        
        
        
        function [convolution_input_1] = tracedPyTorchFunction(obj,convolution_argument1_1,isForward,predict)
            
            convolution_weight_1 = obj.Param_weight;
            
            [convolution_weight_1] = struct('value', dlarray(convolution_weight_1,'UUUUU'), 'rank', 5);
            
            [convolution_6] = msd_heart_model.ops.makeStructForConstant(double(obj.convolution_6), int64(0), "Typed");
            [convolution_29] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_29), int64(1), "Typed");
            [convolution_30] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_30), int64(1), "Typed");
            [convolution_31] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_31), int64(1), "Typed");
            [convolution_11] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_11), int64(0), "Typed");
            [convolution_32] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_32), int64(1), "Typed");
            [convolution_7] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_7), int64(0), "Typed");
            [convolution_111] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_111), int64(0), "Typed");
            [convolution_112] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_112), int64(0), "Typed");
            [convolution_16] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_16), int64(0), "Typed");
            [convolution_161] = msd_heart_model.ops.makeStructForConstant(int64(obj.convolution_161), int64(0), "Typed");
            [convolution_input_1] = msd_heart_model.ops.pyConvolution(convolution_argument1_1, convolution_weight_1, convolution_6, convolution_29, convolution_30, convolution_31, convolution_11, convolution_32, convolution_7);
        end
        
    end
end

